[versions]
kotlin = "1.7.20"

## SDK Versions
minSdk = "24"
targetSdk = "33"
compileSdk = "33"

# Dependencies
android-gradle-plugin = "7.2.2" # Don't bump to 7.3.x until Intellij supports it (unless you're ok with only Android Studio)
ktlint-gradle = "11.0.0"
gradle-versions = "0.42.0"


compose = "1.3.0-alpha01-dev849"
composeCompiler = "1.3.2.1"

android-desugaring = "1.1.8" # Don't bump to 1.2.x until AGP is 7.3.x
androidx-core = "1.8.0"
androidx-test-junit = "1.1.3"
androidx-activity-compose = "1.5.1"
androidx-lifecycle = "2.5.1"

junit = "4.13.2"

coroutines = "1.6.4"
kotlinx-datetime = "0.4.0"
ktor = "2.1.3"

robolectric = "4.8.2"

kermit = "1.1.3"
stately = "1.2.3"

accompanist-swiperefresh = "0.25.1"
koin = "3.2.0"
multiplatformSettings = "0.9"
turbine = "0.8.0"
sqlDelight = "1.5.3"
serialization-json = "1.4.0"

logback = "1.2.11"

multiplatform-uuid = "0.5.0"
hikariCP = "5.0.1"
postgresql = "42.5.0"
molecule = "0.6.1"

[libraries]
android-desugaring = { module = "com.android.tools:desugar_jdk_libs", version.ref = "android-desugaring" }
androidx-core = { module = "androidx.core:core-ktx", version.ref = "androidx-core" }
androidx-lifecycle-runtime = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "androidx-lifecycle" }
androidx-lifecycle-viewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "androidx-lifecycle" }
androidx-test-junit = { module = "androidx.test.ext:junit-ktx", version.ref = "androidx-test-junit" }

compose-compiler = { module = "androidx.compose.compiler:compiler", version.ref = "composeCompiler" }
compose-ui = { module = "androidx.compose.ui:ui", version.ref = "compose" }
compose-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
compose-foundation = { module = "androidx.compose.foundation:foundation", version.ref = "compose" }
compose-material = { module = "androidx.compose.material:material", version.ref = "compose" }
compose-activity = { module = "androidx.activity:activity-compose", version.ref = "androidx-activity-compose" }


coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines-js = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core-js", version.ref = "coroutines" }
coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }

google-accompanist-swipeRefresh = { module = "com.google.accompanist:accompanist-swiperefresh", version.ref = "accompanist-swiperefresh" }

hikariCP = { module = "com.zaxxer:HikariCP", version.ref = "hikariCP" }

junit = { module = "junit:junit", version.ref = "junit" }

koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-test = { module = "io.insert-koin:koin-test", version.ref = "koin" }


kotlinx-dateTime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }

ktor-serialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-main = { module = "io.ktor:ktor-client", version.ref = "ktor" }
ktor-client-js = { module = "io.ktor:ktor-client-js", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-ios = { module = "io.ktor:ktor-client-ios", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-okHttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-contentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }
ktor-client-json = { module = "io.ktor:ktor-client-json", version.ref = "ktor" }
ktor-client-json-js = { module = "io.ktor:ktor-client-json-js", version.ref = "ktor" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-client-websockets = { module = "io.ktor:ktor-client-websockets", version.ref = "ktor" }
ktor-client-websockets-js = { module = "io.ktor:ktor-client-websockets-js", version.ref = "ktor" }
ktor-server-websockets = { module = "io.ktor:ktor-server-websockets", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-contentNegotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktor-server-test-host = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktor-server-auth = { module = "io.ktor:ktor-server-auth", version.ref = "ktor" }
ktor-server-auth-jwt = { module = "io.ktor:ktor-server-auth-jwt", version.ref = "ktor" }
ktor-server-resources = { module = "io.ktor:ktor-server-resources", version.ref = "ktor" }
ktor-resources = { module = "io.ktor:ktor-resources", version.ref = "ktor" }
ktor-client-resources = { module = "io.ktor:ktor-client-resources", version.ref = "ktor" }


logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

jetbains-compose-compiler = { module = "org.jetbrains.compose.compiler:compiler", version.ref = "composeCompiler" }
molecule-runtime = { module = "app.cash.molecule:molecule-runtime", version.ref = "molecule" }

multiplatformSettings-common = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatformSettings" }
multiplatformSettings-test = { module = "com.russhwolf:multiplatform-settings-test", version.ref = "multiplatformSettings" }
multiplatformSettings-serialization = { module = "com.russhwolf:multiplatform-settings-serialization", version.ref = "multiplatformSettings" }
multiplatformSettings-noargs = { module = "com.russhwolf:multiplatform-settings-no-arg", version.ref = "multiplatformSettings" }
multiplatformSettings-coroutines = { module = "com.russhwolf:multiplatform-settings-coroutines", version.ref = "multiplatformSettings" }

multiplatform-uuid = {module = "com.benasher44:uuid", version.ref = "multiplatform-uuid" }

postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }

roboelectric = { module = "org.robolectric:robolectric", version.ref = "robolectric" }

sqlDelight-android = { module = "com.squareup.sqldelight:android-driver", version.ref = "sqlDelight" }
sqlDelight-jvm-sqlite = { module = "com.squareup.sqldelight:sqlite-driver", version.ref = "sqlDelight" }
sqlDelight-jvm-jdbc = { module = "com.squareup.sqldelight:jdbc-driver", version.ref = "sqlDelight" }
sqlDelight-js = { module = "com.squareup.sqldelight:sqljs-driver", version.ref = "sqlDelight" }
sqlDelight-coroutinesExt = { module = "com.squareup.sqldelight:coroutines-extensions", version.ref = "sqlDelight" }
sqlDelight-native = { module = "com.squareup.sqldelight:native-driver", version.ref = "sqlDelight" }
sqlDelight-runtime = { module = "com.squareup.sqldelight:runtime", version.ref = "sqlDelight" }

serialization-json =  { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization-json" }

touchlab-kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }
touchlab-stately = { module = "co.touchlab:stately-common", version.ref = "stately" }

turbine = { module = "app.cash.turbine:turbine", version.ref = "turbine" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }




[plugins]
ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlint-gradle" }
gradleVersions = { id = "com.github.ben-manes.versions", version.ref = "gradle-versions" }

[bundles]
#app-ui = [
#    "compose-compiler",
#    "androidx-core",
#    "androidx-lifecycle-runtime",
#    "androidx-lifecycle-viewmodel",
#    "compose-ui",
#    "compose-tooling",
#    "compose-foundation",
#    "compose-material",
#    "compose-activity",
#    "google-accompanist-swipeRefresh"
#]
ktor-client = ["ktor-client-core", "ktor-client-logging", "ktor-serialization", "ktor-client-contentNegotiation", "ktor-client-auth", "ktor-client-resources"]
multiplatformSettings = ["multiplatformSettings-common", "multiplatformSettings-serialization", "multiplatformSettings-noargs", "multiplatformSettings-coroutines"]
#shared-commonTest = [
#    "kotlin-test",
#    "multiplatformSettings-test",
#    "koin-test",
#    "turbine",
#    "coroutines-test",
#    "ktor-client-mock"
#]
#shared-androidTest = [
#    "androidx-test-junit",
#    "coroutines-test",
#    "roboelectric",
#    "sqlDelight-jvm"
#]

